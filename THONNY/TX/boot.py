import network
import urequests
from machine import Pin, I2C, ADC, deepsleep, reset
from time import sleep_ms, ticks_ms, ticks_diff
import esp

# ==== C·∫•u h√¨nh ====
WIFI_SSID = "A35_01"
WIFI_PASS = "99999999"
THINGSPEAK_API_KEY = "16R3YCTZ9SQQ9TRR"
THINGSPEAK_URL = "https://api.thingspeak.com/update"
ALLOW_SLEEP = True
SLEEP_MS = 5 * 60 * 1000  # 5 ph√∫t
MAX_WIFI_RETRY = 5         # s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi t·ªëi ƒëa
WATCHDOG_TIMEOUT = 20000   # 20 gi√¢y

# ==== I2C & AHT20 ====
i2c = I2C(0, sda=Pin(2), scl=Pin(3), freq=100000)
AHT20_ADDR = 0x38

def aht20_init():
    i2c.writeto(AHT20_ADDR, b'\xBE\x08\x00')
    sleep_ms(20)

def aht20_read():
    i2c.writeto(AHT20_ADDR, b'\xAC\x33\x00')
    sleep_ms(80)
    data = i2c.readfrom(AHT20_ADDR, 6)
    raw_h = ((data[1] << 12) | (data[2] << 4) | (data[3] >> 4))
    raw_t = ((data[3] & 0x0F) << 16) | (data[4] << 8) | data[5]
    hum = (raw_h / 1048576) * 100
    temp = (raw_t / 1048576) * 200 - 50
    return temp, hum

# ==== ADC ƒëo ƒëi·ªán √°p ====
adc = ADC(Pin(1))
adc.atten(ADC.ATTN_11DB)
adc.width(ADC.WIDTH_12BIT)

def read_voltage():
    raw = adc.read()
    v_measured = (raw / 4095) * 3.3
    return v_measured * 1.81  # hi·ªáu ch·ªânh th·ª±c t·∫ø

# ==== Watchdog ƒë∆°n gi·∫£n ====
def watchdog_reset(start_time):
    if ticks_diff(ticks_ms(), start_time) > WATCHDOG_TIMEOUT:
        print("‚è±Ô∏è Watchdog: Qu√° th·ªùi gian, reset ESP...")
        reset()

# ==== K·∫øt n·ªëi WiFi ====
def connect_wifi():
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)
    wlan.disconnect()
    wlan.connect(WIFI_SSID, WIFI_PASS)
    print("üîå ƒêang k·∫øt n·ªëi WiFi...")
    retry = 0
    while not wlan.isconnected():
        sleep_ms(1000)
        retry += 1
        print(f"‚è≥ Th·ª≠ k·∫øt n·ªëi l·∫ßn {retry}")
        if retry >= MAX_WIFI_RETRY:
            print("‚ùå K·∫øt n·ªëi WiFi th·∫•t b·∫°i sau 5 l·∫ßn ‚Üí Reset ESP")
            reset()
    print("‚úÖ WiFi OK:", wlan.ifconfig())
    return wlan

# ==== G·ª≠i d·ªØ li·ªáu ====
def send_to_thingspeak(temp, hum, volt):
    try:
        url = f"{THINGSPEAK_URL}?api_key={THINGSPEAK_API_KEY}&field1={temp:.2f}&field2={hum:.2f}&field3={volt:.2f}"
        print("üì§ G·ª≠i:", url)
        response = urequests.get(url)
        print("üì° Ph·∫£n h·ªìi:", response.text)
        response.close()
    except Exception as e:
        print("‚ö†Ô∏è L·ªói g·ª≠i d·ªØ li·ªáu:", e)
        reset()  # n·∫øu l·ªói m·∫°ng -> reset l·∫°i

# ==== Main ====
print("=== Kh·ªüi ƒë·ªông ESP32-C3 ===")
start_time = ticks_ms()  # d√πng cho watchdog
aht20_init()

try:
    wlan = connect_wifi()
    temp, hum = aht20_read()
    volt = read_voltage()
    print("üå°Ô∏è {:.2f} ¬∞C | üíß {:.2f} % | üîã {:.2f} V".format(temp, hum, volt))
    if 0 < temp < 80 and 0 < hum < 100:
        send_to_thingspeak(temp, hum, volt)
    else:
        print("‚ö†Ô∏è D·ªØ li·ªáu c·∫£m bi·∫øn kh√¥ng h·ª£p l·ªá.")
except Exception as e:
    print("‚ö†Ô∏è L·ªói ch√≠nh:", e)
    reset()

watchdog_reset(start_time)

# ==== Deep Sleep ====
if ALLOW_SLEEP:
    print(f"üò¥ Ng·ªß trong {SLEEP_MS/1000:.0f} gi√¢y...")
    wlan.active(False)
    deepsleep(SLEEP_MS)
else:
    print("üß† Debug: kh√¥ng sleep")
